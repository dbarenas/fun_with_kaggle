install.packages('knnTree')
library(RWeka)
train = read.csv('removed_field_numbers_train.csv', header = T)
train = read.csv('removed_field_numbers_train.csv', header = T)
pwd()
getwd()
getwd()
setwd('.')
getwd()
args(read.table)
get.location <- function(l) {
}
get.location <- function(l) {
get.location <- function(l) {
split.location <- tryCatch(strsplit(l, ",")[[1]],
error = function(e) {return(c(NA, NA))})
clean.location <- gsub("^ ", "", split.location)
if (length(clean.location) > 2 ){
return(c(NA, NA))
} else {
return(clean.location)
}
}
get.location <- function(l) {
split.location <- tryCatch(strsplit(l, ",")[[1]],
error = function(e) {return(c(NA, NA))})
clean.location <- gsub("^ ", "", split.location)
if (length(clean.location) > 2 ){
return(c(NA, NA))
} else {
return(clean.location)
}
}
get.location()
library('caret')
data <- iris
mdl <- train(data, 'svm')
display(mdl)
install.packages('arm')
library('arm')
summary(mdl)
mdl
mdl <- train(data, 'svm')
mdl <- train(data, 'svn')
library('glmnet')
head(iris)
hist(iris$Sepal.Length, breaks = 10, probability=T)
line(density(iris$Sepal.Length))
lines(density(iris$Sepal.Length))
figure()
hist(iris$Sepal.Width, breaks = 20, probability=T)
hist(iris$Sepal.Width, breaks = 20, probability=T)
lines(density(iris$Sepal.Width))
density(iris$Sepal.Width)
curve(density(iris$Sepal.Width))
curves(density(iris$Sepal.Width))
table(iris$Species)
barplot(table(iris$Species), color = c('red', 'green', 'blue'))
barplot(table(iris$Species), col = c('red', 'green', 'blue'))
boxplot(Sepal.Length ~ Species, data = iris)
boxplot(Sepal.Width ~ Species, data = iris)
summary(iris)
hist(iris$Petal.Length, breaks = 15, probability=T)
lines(density(iris$Petal.Length))
boxplot(Petal.Length ~ Species, data = iris)
pairs(iris[:, 1:4])
pairs(iris[, 1:4])
cor(iris)
cor(iris[,1:4])
iris <- transform(iris, color = ifelse(Species=='setosa', 'red', ifelse(Species=='versicolor', 'green', 'blue')))
plot(Petal.Width ~ Sepal.Length, data = iris, col=color)
summary(iris)
pairs(iris[, 1:4], col=iris$color)
model <- lm(Petal.Width ~ Sepal.Length, data = iris)
abline(model)
model2 <- lowess(Petal.Width ~ Sepal.Length, data = iris)
model2 <- lowess(iris$Petal.Width ~ iris$Sepal.Length)
lines(model2)
Sepal.Length = (iris$Sepal.Length - mean(iris$Sepal.Length)) / sd(iris$Sepal.Length)
Sepal.Width = (iris$Sepal.Width - mean(iris$Sepal.Width)) / sd(iris$Sepal.Width)
Petal.Width = (iris$Petal.Width - mean(iris$Petal.Width)) / sd(iris$Petal.Width)
library('arm')
display(lm(Sepal.Width ~ Sepal.Length + Petal.Width)
)
display(lm(Sepal.Width ~ Sepal.Length))
display(lm(Sepal.Width ~ Petal.Width))
head(CO2)
summary(CO2)
table(Treatment, data=CO2)
table(CO2$Treatment)
boxplot(conc ~ Treatment, data = CO2)
boxplot(conc ~ Plant, data = CO2)
hist(CO2$conc, breaks = 20, probability=T)
lines(density(CO2$conc))
boxplot(uptake ~ Plant, data = CO2)
xtabs(~Plant + Type + Treatment, data = CO2)
barplot(~Plant + Type + Treatment, data = CO2)
barplot(CO2[, 1:3])
barplot(~Plant + Type , data = CO2)
xtab(~Plant + Type , data = CO2)
xtabs(~Plant + Type , data = CO2)
xtabs(~Plant + Treatment , data = CO2)
xtabs(~Type + Treatment , data = CO2)
xtabs(~Type, data = CO2)
iris.sample = iris[sample(1:nrow(iris), 10, replace=T),]
summary(iris.sample)
iris.sample
sample(1:10, 10, replace=T)
sample(1:10, 10, replace=T)
sample(1:10, 10, replace=T)
sample(1:10, 10, replace=F)
sample(1:10, 10, replace=F)
irissample[10, 1] = NA
iris.sample[10, 1] = NA
iris.sample
library(e1071)
??e1071
fixed.iris.sample <- impute(iris.sample, what='mean')
fixed.iris.sample
fixed.iris.sample <- impute(iris.sample[,1:4], what='mean')
fixed.iris.sample
fixed.iris.sample <- transform(fixed.iris.sample, Species = iris.sample$Species, Color = iris.sample$color)
fixed.iris.sample
z.iris.sample <- scale(fixed.iris.sample)
z.iris.sample <- scale(fixed.iris.sample[,1:4])
z.iris.sample
mean(z.iris.sample)
mean(z.iris.sample[,1])
sd(z.iris.sample[,1])
sd(z.iris.sample)
cov(z.iris.sample)
breaks = quantile(iris$Sepal.Length, c(0.25, 0.5, 0.75, 1))
breaks
breaks = quantile(iris$Sepal.Length, c(0, 0.25, 0.5, 0.75, 1))
breaks
Sepal.Length <- cut(Sepal.Length, breaks = breaks, include.lowest= T)
Sepal.Length
Sepal.Length <- cut(iris$Sepal.Length, breaks = breaks, include.lowest= T)
Sepal.Length
order(CO2$conc, -CO2$uptake)
aggregate(CO2[,'uptake'], by=CO2$Plant, mean)
aggregate(CO2[,'uptake'], by=data.frame(CO2$Plant), mean)
aggregate(CO2, by=data.frame(CO2$Plant), mean)
aggregate(CO2$Treatment, by=data.frame(CO2$Plant), mean)
aggretate(CO2[,c('conc', 'uptake')], by=c(CO2$Plant, CO2$Type), mean)
aggregate(CO2[,c('conc', 'uptake')], by=c(CO2$Plant, CO2$Type), mean)
aggregate(CO2[,c('conc', 'uptake')], by=data.frame(CO2$Plant, CO2$Type), mean)
test.index <- sample(1:nrow(iris), nrow(iris)/5, replace=F)
train.iris <- iris[-test.index, ]
test.iris <- iris[test.index, ]
summary(train.iris)
nrow(train.iris)
nrow(test.iris)
Prestige
library(car)
test.index <- sample(1:nrow(Prestige), nrow(Prestige)/4, replace=F)
train.prestige <- Prestige[-test.index, ]
test.prestige <- Prestige[test.index, ]
nrow(train.prestige)
nrow(test.prestige)
model <- lm(prestige~., data = train.prestige)
summary(model)
prediction <- predict(model, newdata=test.prestige)
cor(prediction, test.prestige$prestige)
prediction
plot(model)
summary(train.prestige)
model <- lm(prestige ~ ., data = train.prestige)
summary(model)
prediction <- predict(model, newdata = test.prestige)
summary(prediction)
prediction
cor(prediction, test.prestige$prestige)
cor(prediction, test.prestige$prestige, rm.na=T)
length(prediction)
nrow(test.prestige)
cor(prediction, test.prestige$prestige, use='complete.obs')
summary(model)
plot(model)
library(glmnet)
summary(train.prestige)
cv.fit <- cv.glmnet(as.matrix(train.prestige[,c(-4, -6)]), as.vector(train.prestige[,4]), lambda=100, alpha=0.7, family='gaussian')
cv.fit <- cv.glmnet(as.matrix(train.prestige[,c(-4, -6)]), as.vector(train.prestige[,4]), nlambda=100, alpha=0.7 family='gaussian')
cv.fit <- cv.glmnet(as.matrix(train.prestige[,c(-4, -6)]), as.vector(train.prestige[,4]), nlambda=100, alpha=0.7, family='gaussian')
plot(cv.fit)
coef(cv.fit)
prediction <- predict(cv.fit, newx=as.matrix(test.prestige[,c(-4, -6)]))
cor(prediction, test.prestige$prestige)
summary(model)
cv.fit <- cv.glmnet(as.matrix(train.iris[,-5]), train.iris[,5], alpha=0.8, family='multinomial')
cv.fit <- cv.glmnet(as.matrix(train.iris[,-5]), as.vector(train.iris[,5]), alpha=0.8, family='multinomial')
train.iris
summary(train.iris)
cv.fit <- cv.glmnet(as.matrix(train.iris[,c(-5,-6)]), as.vector(train.iris[,5]), alpha=0.8, family='multinomial')
plot(cf.fit)
plot(cv.fit)
summary(cv.fit)
coef(cv.fit)
prediction <- predict(cv.fit, newx=test.iris[,c(-5,-6)], type="class")
prediction <- predict(cv.fit, newx=as.matrix(test.iris[,c(-5,-6)]), type="class")
xtabs(prediction, test.iris$Species)
xtabs(data.frame(prediction), test.iris$Species)
table(prediction, test.iris$Species)
library(DAAG)
library(lattice)
str(nassCDS)
xtabs(weight ~ airbag + dead, data = nassCDS)
xtabs( ~ airbag + dead, data = nassCDS)
addmargin(xtabs( ~ airbag + dead, data = nassCDS), margin = 2, FUN=c("rate"=function(r){r[1]/sum(r)}))
addmargins(xtabs( ~ airbag + dead, data = nassCDS), margin = 2, FUN=c("rate"=function(r){r[1]/sum(r)}))
addmargins(xtabs( ~ airbag + dead, data = nassCDS), margin = 2, FUN=c("rate"=function(r){r[1]*100/sum(r)}))
addmargins(xtabs( weight ~ airbag + dead, data = nassCDS), margin = 2, FUN=c("rate"=function(r){r[1]*100/sum(r)}))
addmargins(xtabs( ~ seatbelt + dead, data = nassCDS), margin = 2, FUN=c("rate"=function(r){r[1]*100/sum(r)}))
str(kiwishade)
with(kiwishade, aggregate(yield, by=list(block, shade), mean))
histogram(~body+brain, data = Animals)
densityplot(~body+brain, data = Animals)
densityplot(bod, data = Animals)
densityplot(body, data = Animals)
densityplot(~body, data = Animals)
densityplot(~log(body), data = Animals)
densityplot(~log(body)+log(brain), data = Animals)
xyplot(body~brain, data = Animals)
xyplot(log(body)~log(brain), data = Animals)
lines(lowess(log(body)~log(brain), data=Animals))
with(Animals,lines(lowess(log(body)~log(brain))))
plot(log(body)~log(brain), data = Animals)
with(Animals,lines(lowess(log(body)~log(brain))))
with(Animals, cor(body, brain))
with(Animals, cor(log(body), log(brain))
)
with(Animals, cor(log(body), log(brain), method="spearman"))
with(Animals, cor(body, brain, method="spearman"))
with(Animals, cor.test(body, brain, method="spearman"))
str(kiwifruit)
library(MASS)
??kiwifruit
str(fruitohms)
plot(ohms~juice, data = furitohms)
plot(ohms~juice, data = fruitohms)
abline(lm(ohms~juice, data=fruitohms))
with(fruitohms, cor(ohms, juice))
with(fruitohms, cor(ohms, juice, method='spearman'))
with(fruitohms, lines(lowess(ohms~juice)))
str(cuckoohosts)
with(cuckoohosts, cor(clength, hlength))
with(cuckoohosts, cor(clength, hlength, rm.na=T))
with(cuckoohosts, cor(clength, hlength, na.rm=T))
with(rm.na(cuckoohosts), cor(clength, hlength))
with(na.rm(cuckoohosts), cor(clength, hlength))
with(cuckoohosts[is.complete(cuckoohosts),], cor(clength, hlength))
with(cuckoohosts[complete.cases(cuckoohosts),], cor(clength, hlength))
plot(clength ~ hlength, data = cuckoohosts)
text(clength ~ hlength, data=cuckoohosts, labels=row.names(cuckoohosts))
install.packages('learnBayes')
install.packages('LearnBayes')
library(LearnBayes)
help(package=LearnBayes)
library('jags')
library('rjags')
library('rjag')
install.packages('rjags')
library('rjags')
library('rjags')
remove.packages('rjags')
library('rjags')
install.packages('rjags')
library('rjags')
remove.packages('rjags')
q()
install.packages('rjags')
library('rjags')
library('LearnBayes')
update.packages()
exit
quit()
install.packages('plotrix')
update.packages()
y
update.pacakges()
update.packages()
install.packages('mine')
install.packages('minerva')
library(TSP)
library(doMC)
registerDoMC(cores=4)
foreach(i <- 1:5) %dopar% {print(i)
c(i, i+1)
}
foreach(i = 1:5) %dopar% {print(i)
c(i, i+1)
}
foreach(i = 1:5) %dopar% {
mypb <- tkProgressBar(title = "R progress bar", label = "",
min = 0, max = 1, initial = 0, width = 300)
setTkProgressBar(mypb, i)
c(i, i+1)
}
library('tcltk')
foreach(i = 1:5) %dopar% {
mypb <- tkProgressBar(title = "R progress bar", label = "",
min = 0, max = 1, initial = 0, width = 300)
setTkProgressBar(mypb, i)
c(i, i+1)
}
foreach(i <- 1:5) %dopar% {cat(i), i}
foreach(i <- 1:5) %dopar% {cat(i); i}
foreach(i = 1:5) %dopar% {cat(i); i}
## given an existing TSP solution, find a TWIN solution
## satisfying that any path in the original solution will not appear in the TWIN
## ALGORITHM:
## 1. for connecting grid - reorder them
## (e.g., rowsbyrows -> colsbycols OR reverse grid order OR specifying different starting node)
## 2. for within each grid - change the distance matrix to make the existing path entry INF
setwd("~/Dropbox/kaggle/santa/RWithConcorde")
library(TSP)
library(doMC)
registerDoMC(cores=4)
##load the existing grided TSP solution
load('tspgridtour.RData')
##-- build the tour_orders
##-- build the tour_orders - row by row (the order of grided.tours)
##--tour_orders = sapply(1:ncol, function(c){if (c%%2==1) (c-1)*nrow+seq(1,nrow) else (c-1)*nrow+seq(nrow, 1)})
##--tour_orders = as.vector(tour_orders)
## make the distance matrix entry on existing tour VERY LARGE
BIG.NUM <- Inf#100000000 # within 2k x 2k
jam_dist_matrix <- function(dist.matrix, grid.tour){
dist.matrix <- as.matrix(dist.matrix)
stopifnot(nrow(dist.matrix) == length(grid.tour))
for(i in 1:(length(grid.tour)-1)) {
city1 <- grid.tour[i]
city2 <- grid.tour[i+1]
dist.matrix[city1, city2] <- BIG.NUM
dist.matrix[city2, city1] <- BIG.NUM
}
return (as.dist(dist.matrix))
}
## solve TSP for twins
twin.tours <- foreach(xy = grid.index, .packages=c('TSP'), .inorder = F) %dopar% {
xindex <- xy[1]
yindex <- xy[2]
dist.matrix <- with(city.grids, dist(city.grids[xregion==xindex & yregion==yindex, 2:3]))
grid.tour <- grided.tours[[(xindex-1) * ncol + yindex]] ## ALWAYS (x-1) * ncol + y
dist.matrix <- jam_dist_matrix(dist.matrix, grid.tour)
tsp <- TSP(dist.matrix)
tour <- solve_TSP(tsp, method="linkern")
#tour <- solve_TSP(tsp, method="nn")
#tour <- solve_TSP(tsp, method="nn", control=list(start = length(grid.tour))) # different start for nn
list(tsp = tsp, tour = tour)
}
complete_tour <- function(grid.index, tsp.tours, city.grids) {
tsps <- sapply(tsp.tours, function(p.t){p.t[[1]]})
tours <- sapply(tsp.tours, function(p.t){p.t[[2]]})
inner_tours_length = sum(sapply(tsp.tours, function(p.t){tour_length(p.t[[1]], p.t[[2]])}))
#wrong - tour_orders = sapply(1:nrow, function(r){if (r%%2==1) (r-1)*ncol+seq(1,ncol) else (r-1)*ncol+seq(ncol, 1)})
tour_orders <- sapply(1:ncol, function(c){if (c%%2==1) (c-1)*nrow+seq(1,nrow) else (c-1)*nrow+seq(nrow, 1)})
## -- use the reverse order for grid
## -- tour_orders = rev(as.vector(tour_orders))
## DONT use the reverse order for grid - for easy later blending
tour_orders <- as.vector(tour_orders)
## WRITE chunk size file for further blending
chunk.sizes <- unlist(sapply(tours[tour_orders], function(t){length(labels(t))}))
write.table(chunk.sizes, file = './chunk_sizes.csv', sep = '\r\n', row.names = F, col.names = F)
## calculate the outer tour length
outer_tours_length <- 0
for(i in 1:(length(tour_orders)-1)) {
pre_tour <- tours[[tour_orders[i]]]
next_tour <- tours[[tour_orders[i+1]]]
pre_end <- tail(labels(pre_tour), n = 1)
next_start <- head(labels(next_tour), n = 1)
#print(c(pre_tour, next_tour))
outer_tours_length <- outer_tours_length + dist(city.grids[c(pre_end, next_start), 2:3])[[1]]
}
full.tour <- as.integer(unlist(sapply(tours[tour_orders], function(t){labels(t)})))
return (list(full.tour = full.tour, full.tour.length = inner_tours_length + outer_tours_length))
}
twin.tour <- complete_tour(grid.index, twin.tours, city.grids)
print (twin.tour$full.tour.length)
print (length(twin.tour$full.tour))
## save the tour to csv
write.table(twin.tour$full.tour, file = './twintour.csv', sep = '\r\n', col.names = F, row.names = F)
## plotting
regioin.colors <- with(city.grids, (as.integer(xregion)-1)*10+as.integer(yregion))
with(city.grids, plot(x, y, pch='.', col=regioin.colors))
with(city.grids, lines(x[twin.tour$full.tour], y[twin.tour$full.tour], col=regioin.colors))
title(paste('twin tour with distance ', twin.tour$full.tour.length))
