install.packages('rJava')
install.packages("rJava")
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWekajars")
install.packages("RWekajars")
library(tm)
update.pacakges()
update.packages()
stemmed <- tm_map(corpus, stemDocument)
inspect(stemmed[1:5])
install.pacakges('rJava')
install.packages('rJava')
install.packages('rWeka')
install.packages('RWeka')
install.packages('RWekajars')
update.packages()
library(twitteR)
tweets <- searchTwitter('Singapore', n = 200)
tweets <- searchTwitter('Singapore MRT', n = 200)
tweets[[1:5\]]
tweets[[1:5]]
tweets[1:5]
length(tweets)
library(doMC)
registerDoMC(cores = 4)
foreach(i = 1:length(tweets), .combine='c', .inorder=F){tweets[[i]]$text}
tweets[[1]]$test
tweets[[1]]$text
foreach(i = 1:length(tweets), .combine='c', .inorder=F) %dopar% {tweets[[i]]$text}
tweet.data <- foreach(i = 1:length(tweets), .combine='c', .inorder=F) %dopar% {tweets[[i]]$text}
library(tm)
tweets <- Corpus(VectorSource(tweet.data))
summary(tweets)
tweets <- tm_map(tweets, tolower)
tweets <- tm_map(tweet.data, tolower)
tweets[1]
tweets
summary(tweets)
tweets[[1]]
tweets[[2]]
tweets[[3]]
tweets[[5]]
?tolower
tweets <- Corpus(VectorSource(tweet.data, encoding='ISO-8859-1'))
tweets <- tm_map(tweets, tolower)
?tm
??tm
help(package='tm')
x1 <- rnorm(100)
x2 <- rnorm(100)
x3 <- rnorm(100)
x4 <- rnorm(100)
ds1 <- data.frame(ctiy=rep(1, 100), x1=x1, x2=x2)
ds2 <- data.frame(ctiy=rep(2, 100), x1=x1, x3=x3, x4=x4)
merge(ds1, ds2, by = c('city', 'x1'))
merge(ds1, ds2, by.x = c('city', 'x1'), by.y = c('city', 'x1'))
merge(ds1, ds2, by.x = c('ctiy', 'x1'))
merge(ds1, ds2, by.x = c(x1'))
)
)]
)
)
)))))
]
,
x1 <- rnorm(100)
x2 <- rnorm(100)
x3 <- rnorm(100)
x4 <- rnorm(100)
ds1 <- data.frame(ctiy=rep(1, 100), x1=x1, x2=x2)
ds2 <- data.frame(ctiy=rep(2, 100), x1=x1, x3=x3, x4=x4)
merge(ds1, ds2, by = 'x1')
merge(ds1, ds2, by = c('x1', 'ctiy'))
merge(ds1, ds2, by = c('x1', 'ctiy'), all = T)
experiment <- data.frame(times = c(0,0,10,10,20,20,30,30), expval = c(1,1,2,2,3,3,4,4))
simul <- data.frame(times = c(0,10,20,30), simul = c(3,4,5,6))
experiment
simul
merge(experiment, simul, by = 'times')
merge(experiment, simul, by = 'times', all = T)
f1 <- c('C', 'A', 'T')
ifelse(f1=='C', 'C', 'NONC')
?model.matrix
model.matrix(factor(c('Yes', 'Yes', 'No'), levels=1:2))
y <- c('Yes', 'Yes', 'Yes', 'No')
y <- as.factor(y)
y
model.matrix(y)
model.matrix(y-1)
x <- c(2, 2, 5, 3, 6, 5, NA)
xf <- factor(x, levels = 2:6)
model.matrix(xf - 1)
model.matrix(xf)
model.matrix(as.numeric(xf))
?gl
dd <- data.frame(a = gl(3,4), b = gl(4,1,12))
dd
model.matrix(dd)
model.matrix(~ a, dd)
model.matrix(~ a+b, dd)
y <- factor(c("yes", 'yes', 'yes', 'no'))
y
model.matrix(~y, y)
model.matrix(~, y)
model.matrix(y)
y <- as.data.frame(y)
y
model.matrix(~ y, y)
iris
dummy <- model.matrix(Species ~ ., iris)
dummy
str(dummy)
dummy <- model.matrix(~ Species, iris)
dummy
dummy <- model.matrix(. ~ Species, iris)
summary(dummy)
attributres(dummy)
attributes(dummy)
dummy <- as.data.frame(dummy)
attributes(dummy)
names(dummy) <- labels(iris$Species)
names(dummy) <- levels(iris$Species)
summary(dummy)
str(dummy)
iris2 <- cbind(iris[1:4], dummy)
str(iris2)
head(iris2)
?order
df <- data.frame(x1=x1, x2=x2)
order(df)
df[order[df$x1, df$x2],]
df[df[order(df$x1, df$x2)],]
df[order(df$x1, df$x2),]
df <- data.frame(x1=x1, x2=x2, city = rep(c(1, 2), 50))
df[df[order(df$city, df$x2)],]
df[order(df$city, df$x2),]
aggreate(df, df$city, sum)
aggregate(df, df$city, sum)
summary(df$city)
aggregate(df, list(df$city), sum)
a <- NULL
attr(a, 'hello') <- 1
install.packages(c('RTextTools', 'topicmodels'))
library(RTextTools)
library(topicmodels)
data(NYTimes)
summary(NYTimes)
?create_matrix
matrix <- create_matrix(as.matrix(NYTimes[,c('Title', 'Subject')]), language = 'english', removeNumbers=T, stemWords=T, weighting=weightTf)
k <- length(unique(NYTimes$Topic.Code))
k
lda <- LDA(matrix, k)
summary(lda)
predict(lda, newdata = matrix)
attributes(lda)
str(lda)
install.packages('rpud')
?Dist
??Dist
library(ff)
library(ff)
library(caret)
library(rattle)
data(weather)
str(weather)
edit(weather)
describe(weather)
library(Hmisc)
describe(weather)
pie(table(weather$RainTomorrow))
text(table(weather$RainTomorrow))
pie(table(weather$RainToday))
xtabs(RainTomorrow ~ RainToday, data = weather)
xtabs(as.numeric(RainTomorrow) ~ as.numeric(RainToday), data = weather)
xtabs(~ RainTomorrow | RainToday, data = weather)
?xtabs
xtabs(~ RainTomorrow + RainToday, data = weather)
summary(weather)
describe(weather$RISK_MM)
risk_mm <- cut(weather$RISK_MM, quantile(weather$RISK_MM, probs=c(0, 0.10, 0.25, 0.50, 0.75, 1)))
risk_mm <- cut(weather$RISK_MM, breaks=quantile(weather$RISK_MM, probs=c(0, 0.10, 0.25, 0.50, 0.75, 1)))
quantile(weather$RISK_MM, probs=c(0, 0.10, 0.25, 0.50, 0.75, 1))
hist(weather$RISK_MM)
lines(density(weather$RISK_MM))
hist(weather$RISK_MM, probability=T)
lines(density(weather$RISK_MM))
risk_mm <- cut(weather$RISK_MM, breaks=c(0, 0.5, 1))
table(risk_mm, weather$RainTomorrow)
risk_mm <- cut(weather$RISK_MM, breaks=c(0, 0.5, 1, max(weather$RISK_MM)), include.lowest=T,right=T)
table(risk_mm, weather$RainTomorrow)
str(weather)
cor.cluster <- hclust(dist(cor(weather[, 3:23])))
cor.cluster <- hclust(dist(cor(weather[, 3:23], use='pairwise', method='pearson')))
numeric.attrs <- f
numeric.attrs <- Filter(function(c){is.numeric(weather[,c])}, names(weather))
numeric.attrs
cor.cluster <- hclust(dist(cor(weather[, numeric], use='pairwise', method='pearson')))
cor.cluster <- hclust(dist(cor(weather[, numeric.attrs], use='pairwise', method='pearson')))
plot(cor.cluster)
cor.cluster <- hclust(dist(cor(weather[, -numeric.attrs], use='pairwise', method='pearson')))
cor.cluster <- hclust(dist(cor(weather[, c('WindGustDir', 'RainToday', 'RainTomorrow')], use='pairwise', method='pearson')))
?cor
plot(weather[, numeric.attrs[1:5]], col= weather$RainTomorrow)
plot(weather, col= weather$RainTomorrow)
plot(weather[, 1:7], col= weather$RainTomorrow)
plot(weather[, c('WindSpeed9am', 'Sunshine', 'MinTemp', 'MaxTemp', 'Pressure3pm', 'Humidity9am', 'Cloud3pm')], col= weather$RainTomorrow)
plot(weather[, c('WindSpeed9am', 'Sunshine', 'MinTemp', 'MaxTemp', 'Pressure3pm', 'Humidity9am', 'Cloud3pm')], col= weather$RainTomorrow, pch = weather$RainToday)
plot(weather[, c('WindSpeed9am', 'Sunshine', 'MinTemp', 'MaxTemp', 'Pressure3pm', 'Humidity9am', 'Cloud3pm')], col= weather$RainTomorrow, pch = as.numeric(weather$RainTomorrow))
test.index <- sample(1:nrow(weather), nrow(weather)/5, replace = F)
weather.train <- weather[-test.index, ]
weather.test <- weather[test.index, ]
library(rpart)
weather.rpart <- rpart(RainTomorrow ~ RainToday + SunShine + Pressure3pm + Humidity9am, data = weather)
weather.rpart <- rpart(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am, data = weather.strain)
weather.rpart <- rpart(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am, data = weather.train)
plot(weather.rpart)
text(weather.rpart)
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test))
summary(weather.test)
table(na.rm(weather.test$RainTomorrow), predict(weather.rpart, newdata=na.rm(weather.test)))
table(na.omit(weather.test$RainTomorrow), predict(weather.rpart, newdata=na.omit(weather.test)))
length((weather.test$RainTomorrow))
length(predict(weather.rpart, newdata=na.omit(weather.test)))
nrow(weather.test)
nrow(predict(weather.rpart, newdata=na.omit(weather.test)))
nrow(predict(weather.rpart, newdata=weather.test))
dim(predict(weather.rpart, newdata=weather.test))
dim(predict(weather.rpart, newdata=weather.test, type='response'))
predict.rpart
dim(predict(weather.rpart, newdata=weather.test, type='response'))
dim(predict(weather.rpart, newdata=weather.test, type='class'))
length(predict(weather.rpart, newdata=weather.test, type='class'))
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test, type='class'))
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
table(predict(weather.rpart, newdata=weather.train, type='class'), weather.train$RainTomorrow)
?table
table(predict(weather.rpart, newdata=weather.train, type='class'), weather.train$RainTomorrow )
table(predict(weather.rpart, newdata=weather.train, type='class'))
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
weather.rpart$cptable
weather.rpart <- prune(weather.rpart, cp=0.02777778)
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
summary(weather.rpart)
weather.rpart <- rpart(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am + Cloud3pm, data = weather.train)
weather.rpart$cptable
weather.rpart <- prune(weather.rpart, cp =  0.02777778 )
plot(weather.rpart)
text(weather.rpart)
weather.rpart <- rpart(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am + Cloud3pm, data = weather.train)
plot(weather.rpart)
text(weather.rpart)
library(party)
weather.ctree <- ctree((RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am + Cloud3pm, data = weather.train))
weather.ctree <- ctree(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am + Cloud3pm, data = weather.train)
plot(weather.ctree)
table(weather.test$RainTomorrow, predict(ctree, newdata=weather.test, type='class'))
table(weather.test$RainTomorrow, predict(weather.ctree, newdata=weather.test, type='class'))
table(weather.test$RainTomorrow, predict(weather.ctree, newdata=weather.test, type='response'))
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test, type='class'))
table(weather.train$RainTomorrow, predict(weather.ctree, newdata=weather.train, type='response'))
summary(weather.rpart)
update.library()
update.packages()
library(Hmisc)
library(mice)
md.pattern(weather)
md.pattern(weather[,1:7])
md.pattern(weather[,1:8])
barplot(RainTomorrow~RainToday, data = weather)
?barplot
boxplot(Raintomorrow ~ RainToday, data = weather)
boxplot(RainTomorrow ~ RainToday, data = weather)
boxplot(RainTomorrow, data = weather)
boxplot(Pressure3pm~RainTomorrow, data = weather)
?cor
library(latticist)
install.packages('latticist')
library(latticist)
latticist(weather)
model.table(~RainTomorrow+RainToday, data = weather)
model.matrix(~RainTomorrow+RainToday, data = weather)
model.matrix(~RainTomorrow+RainToday, data = weather[1:10, ])
head(summary, n=10)
head(weather, n=10)
model.matrix(~RainTomorrow+RainToday, data = weather[1:10, ])
weather[1:10, c('RainToday', 'RainTomorrow')]
model.matrix(~RainTomorrow, data = weather[1:10, ])
dummy <- data.frame(Yes = as.numeric(RainTomorrow == 'Yes'), No = as.numeric(RainTomorrow == 'No'))
dummy <- with(weather, data.frame(Yes = as.numeric(RainTomorrow == 'Yes'), No = as.numeric(RainTomorrow == 'No')))
head(dummy)
?rpart
library(glmnet)
?glmnet
?rpart
summary(weather.rpart)
attributes(weather.rpart)
summary(weather.rpart$control)
print(weather.rpart$control)
weather.rpart <- rpart(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am + Cloud3pm, data = weather.train, control=list(minsplit=10, minbucket=2))
plotcp(weather.rpart)
weather.rpart$cp
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test, type='class'))
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
weather.rpart <- prune(weather.rpart, cp = 0.01851852)
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test, type='class'))
plot(weather.rpaert)
plot(weather.rpart)
text(weather.rpart)
summary(weather.rpart)
print(weather.rpart)
weather.rpart <- prune(weather.rpart, cp = 0.01851852, parms=list(prior=c(0.5, 0.5)))
weather.rpart <- rpart(RainTomorrow ~ RainToday + Sunshine + Pressure3pm + Humidity9am + Cloud3pm, data = weather.train, parms = list(prior=c(0.5, 0.5)), control=list(minsplit=10, minbucket=2))
plot(weather.rpart)
text(weather.rpart)
cpplot(weather.rpart)
plotcp(weather.rpart)
printcp(weather.rpart)
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test, type='class'))
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
weather.rpart <- prune(weather.rpart, cp = 0.011661)
plot(weather.rpart)
text(weather.rpart)
table(weather.test$RainTomorrow, predict(weather.rpart, newdata=weather.test, type='class'))
table(weather.train$RainTomorrow, predict(weather.rpart, newdata=weather.train, type='class'))
?ctree
install.packages('C5')
install.packages('C50')
library('RWeka')
library(C50)
update.packages()
setwd("~/workspace/fun_with_kaggle/santa/RWithConcorde")
library(TSP)
library(doMC)
registerDoMC(cores=4)
load('tspgridtour.RData')
## OVERWRITE nrow, ncol HERE!!!!!!!!!!!!
nrow <- 8
ncol <- 8
## load city coordinates
cities <- read.csv('../data/santa_cities.csv', header = T)
## function of making equal-sized grid in the map
make.grids <- function(data.x.y, nrow, ncol, xrange=20000, yrange=20000) {
x.breaks <- (0:ncol) * xrange / ncol
y.breaks <- (0:nrow) * yrange / nrow
x.grids <- as.integer(cut(data.x.y$x, breaks=x.breaks, right=T, include.lowest=T))
y.grids <- as.integer(cut(data.x.y$y, breaks=y.breaks, right=T, include.lowest=T))
data.x.y$xregion <- as.factor(x.grids)
data.x.y$yregion <- as.factor(y.grids)
return (data.x.y)
}
city.grids <- make.grids(cities, nrow = nrow, ncol = ncol)
grid.index <- matrix(nrow = 2, ncol = nrow*ncol)
for (xgrid in 1:ncol) {
for (ygrid in 1:nrow) {
grid.index[,(xgrid-1)*ncol + ygrid] <- c(xgrid, ygrid)
}
}
tsp.tour <- c(unlist(grided.tours))
BIG.NUM <- Inf#100000000 # within 2k x 2k
jam_dist_matrix <- function(dist.matrix){
city.labels <- labels(dist.matrix)
dist.matrix <- as.matrix(dist.matrix)
for(city in city.labels) {
icity <- which(tsp.tour == city)
if (icity > 1) {
precity <- tsp.tour[icity-1]
if (precity %in% city.labels) {
dist.matrix[precity, city] <- BIG.NUM
dist.matrix[city, precity] <- BIG.NUM
}
}
if (icity < length(tsp.tour)) {
nextcity <- tsp.tour[icity+1]
if (nextcity %in% city.labels) {
dist.matrix[nextcity, city] <- BIG.NUM
dist.matrix[city, nextcity] <- BIG.NUM
}
}
}
return (as.dist(dist.matrix))
}
xindex <-1
yindex<-1
dist.matrix <- with(city.grids, dist(city.grids[xregion==xindex & yregion==yindex, 2:3]))
dist.matrix <- jam_dist_matrix(dist.matrix)
city.labels <- labels(dist.matrix)
head(city.labels)
dist.matrix <- as.matrix(dist.matrix)
icity <- which(tsp.tour == city)
city <- city.labels[1]
city
icity <- which(tsp.tour == city)
icity
precity <- tsp.tour[icity-1]
precity
dist.matrix[precity, city]
summary(dist.matrix)
rownames(dist.matrix)
precity <- tsp.tour[icity-1]
dist.matrix[str(precity), str(city)] <- BIG.NUM
## given an existing TSP solution, find a TWIN solution
## satisfying that any path in the original solution will not appear in the TWIN
## ALGORITHM:
## 1. for connecting grid - reorder them
## (e.g., rowsbyrows -> colsbycols OR reverse grid order OR specifying different starting node)
## 2. for within each grid - change the distance matrix to make the existing path entry INF
## COMPARED WITH GRID_TWIN_TSP, the main difference is that the twin solution can use a different
## grid (usually bigger, rougher) from the first solution. This allows more "neighbors" available
## for a node
setwd("~/workspace/fun_with_kaggle/santa/RWithConcorde")
library(TSP)
library(doMC)
registerDoMC(cores=4)
##load the existing grided TSP solution
load('tspgridtour.RData')
## OVERWRITE nrow, ncol HERE!!!!!!!!!!!!
nrow <- 8
ncol <- 8
## load city coordinates
cities <- read.csv('../data/santa_cities.csv', header = T)
## function of making equal-sized grid in the map
make.grids <- function(data.x.y, nrow, ncol, xrange=20000, yrange=20000) {
x.breaks <- (0:ncol) * xrange / ncol
y.breaks <- (0:nrow) * yrange / nrow
x.grids <- as.integer(cut(data.x.y$x, breaks=x.breaks, right=T, include.lowest=T))
y.grids <- as.integer(cut(data.x.y$y, breaks=y.breaks, right=T, include.lowest=T))
data.x.y$xregion <- as.factor(x.grids)
data.x.y$yregion <- as.factor(y.grids)
return (data.x.y)
}
## redo city grids based on new nrow, ncol
city.grids <- make.grids(cities, nrow = nrow, ncol = ncol)
grid.index <- matrix(nrow = 2, ncol = nrow*ncol)
for (xgrid in 1:ncol) {
for (ygrid in 1:nrow) {
grid.index[,(xgrid-1)*ncol + ygrid] <- c(xgrid, ygrid)
}
}
## FIRST TSP SOLUTION AS REFERENCE
tsp.tour <- c(unlist(grided.tours))
##-- build the tour_orders - row by row (the order of grided.tours)
##--tour_orders = sapply(1:ncol, function(c){if (c%%2==1) (c-1)*nrow+seq(1,nrow) else (c-1)*nrow+seq(nrow, 1)})
##--tour_orders = as.vector(tour_orders)
## make the distance matrix entry on existing tour VERY LARGE
BIG.NUM <- Inf#100000000 # within 2k x 2k
jam_dist_matrix <- function(dist.matrix){
city.labels <- labels(dist.matrix)
dist.matrix <- as.matrix(dist.matrix)
for(city in city.labels) {
icity <- which(tsp.tour == city)
if (icity > 1) {
precity <- tsp.tour[icity-1]
if (precity %in% city.labels) {
dist.matrix[as.character(precity), as.character(city)] <- BIG.NUM
dist.matrix[as.character(city), as.character(precity)] <- BIG.NUM
}
}
if (icity < length(tsp.tour)) {
nextcity <- tsp.tour[icity+1]
if (nextcity %in% city.labels) {
dist.matrix[as.character(nextcity), as.character(city)] <- BIG.NUM
dist.matrix[as.character(city), as.character(nextcity)] <- BIG.NUM
}
}
}
return (as.dist(dist.matrix))
}
## solve TSP for twins
twin.tours <- foreach(xy = grid.index, .packages=c('TSP'), .inorder = F) %dopar% {
xindex <- xy[1]
yindex <- xy[2]
dist.matrix <- with(city.grids, dist(city.grids[xregion==xindex & yregion==yindex, 2:3]))
dist.matrix <- jam_dist_matrix(dist.matrix)
tsp <- TSP(dist.matrix)
tour <- solve_TSP(tsp, method="linkern")
#tour <- solve_TSP(tsp, method="nn")
#tour <- solve_TSP(tsp, method="nn", control=list(start = length(grid.tour))) # different start for nn
list(tsp = tsp, tour = tour)
}
complete_tour <- function(grid.index, tsp.tours, city.grids) {
tsps <- sapply(tsp.tours, function(p.t){p.t[[1]]})
tours <- sapply(tsp.tours, function(p.t){p.t[[2]]})
inner_tours_length = sum(sapply(tsp.tours, function(p.t){tour_length(p.t[[1]], p.t[[2]])}))
#wrong - tour_orders = sapply(1:nrow, function(r){if (r%%2==1) (r-1)*ncol+seq(1,ncol) else (r-1)*ncol+seq(ncol, 1)})
tour_orders = sapply(1:ncol, function(c){if (c%%2==1) (c-1)*nrow+seq(1,nrow) else (c-1)*nrow+seq(nrow, 1)})
## use the reverse order for grid
tour_orders = rev(as.vector(tour_orders))
## calculate the outer tour length
outer_tours_length <- 0
for(i in 1:(length(tour_orders)-1)) {
pre_tour <- tours[[tour_orders[i]]]
next_tour <- tours[[tour_orders[i+1]]]
pre_end <- tail(labels(pre_tour), n = 1)
next_start <- head(labels(next_tour), n = 1)
#print(c(pre_tour, next_tour))
outer_tours_length <- outer_tours_length + dist(city.grids[c(pre_end, next_start), 2:3])[[1]]
}
full.tour <- as.integer(unlist(sapply(tours[tour_orders], function(t){labels(t)})))
return (list(full.tour = full.tour, full.tour.length = inner_tours_length + outer_tours_length))
}
twin.tour <- complete_tour(grid.index, twin.tours, city.grids)
print (twin.tour$full.tour.length)
print (length(twin.tour$full.tour))
## save the tour to csv
write.table(twin.tour$full.tour, file = './twintour.csv', sep = '\r\n', col.names = F, row.names = F)
## plotting
regioin.colors <- with(city.grids, (as.integer(xregion)-1)*10+as.integer(yregion))
with(city.grids, plot(x, y, pch='.', col=regioin.colors))
with(city.grids, lines(x[twin.tour$full.tour], y[twin.tour$full.tour], col=regioin.colors))
title(paste('twin tour with distance ', twin.tour$full.tour.length))
