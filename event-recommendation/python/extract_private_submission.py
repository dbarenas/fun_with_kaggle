## The (user, event) rows in private test is a subset of 
## the original test. This script extracts the related
## rows directly from the public submission file, to
## form private submissions

import sys
import pandas as pd
import csv
from collections import defaultdict

def main():
    if len(sys.argv) != 3:
        print 'Usage: %s [public_submission] [private_submission]' % (sys.argv[0],)
        sys.exit(-1)
    test_private_path = '../data/test_private.csv' # generated by generate_private_test.py script
    public_submission_path, private_submission_path = sys.argv[1:]
    ## load test_private user_event pairs
    with open(test_private_path, 'r') as fprivate:
        reader = csv.reader(fprivate)
        reader.next() # ignore header
        private_ues = set([(u, e) for (u, e) in reader])
    ## load public_submission user_event pairs
    with open(public_submission_path, 'r') as fpublic_submission:
        reader = csv.reader(fpublic_submission)
        submission_header = reader.next() #['User', 'Events']
        public_submission_ues = sum([[(user, event) for event in events.split(' ')] 
                                        for (user, events) in reader], 
                                    [])
    ## filter out all rows not in test private
    private_submission_ues = [r for r in public_submission_ues if r in private_ues] 
    print '#rows in public submissions: %d, #rows in private submissions: %d' % (len(public_submission_ues), len(private_submission_ues))
    ## write private submission to files
    user_events = defaultdict(list)
    for (user, event) in private_submission_ues:
        user_events[int(user)].append(event)
    users = sorted(user_events.keys())
    events = [' '.join(user_events[u]) for u in users]
    submission = pd.DataFrame({"User": users, "Events": events})
    submission[["User", "Events"]].to_csv(private_submission_path, index=False)
    
if __name__ == '__main__':
    main()